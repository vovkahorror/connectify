{"version":3,"file":"static/js/494.041461c3.chunk.js","mappings":"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","sources":["components/Register/RegisterForm/RegisterForm.tsx","components/Register/Register.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://connectify/./src/components/Login/Login.module.scss?4086","webpack://connectify/./src/components/Login/LoginForm/LoginForm.module.scss?ebd6","webpack://connectify/./src/components/common/FormsControls/FormsControls.module.scss?b614"],"sourcesContent":["import React, {FC} from 'react';\r\nimport {Field, FormErrors, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, Input} from '../../common/FormsControls/FormsControls';\r\nimport {required} from '../../../utils/validators/validators';\r\nimport styles from '../../Login/LoginForm/LoginForm.module.scss';\r\nimport controlsStyles from '../../common/FormsControls/FormsControls.module.scss';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {useTranslation} from 'react-i18next';\r\nimport {useTheme} from '../../../theme/useTheme';\r\n\r\nconst RegisterForm: FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    const {t} = useTranslation('auth');\r\n    const {theme} = useTheme();\r\n    const themeClassName = theme === 'light' ? styles.light : styles.dark;\r\n\r\n    return (\r\n        <form className={styles.form} onSubmit={handleSubmit}>\r\n            <div className={styles.fieldWrapper}>\r\n                <span className={`${styles.fieldTitle} ${themeClassName}`}>{t('login')}</span>\r\n                {createField(t('yourLogin'), 'login', 'text', [required], Input, 'new-password')}\r\n            </div>\r\n            <div className={styles.fieldWrapper}>\r\n                <span className={`${styles.fieldTitle} ${themeClassName}`}>Email</span>\r\n                {createField(t('yourEmail'), 'email', 'text', [required], Input, 'new-password')}\r\n            </div>\r\n            <div className={styles.fieldWrapper}>\r\n                <span className={`${styles.fieldTitle} ${themeClassName}`}>{t('password')}</span>\r\n                {createField(t('createPassword'), 'password', 'password', [required], Input, 'new-password')}\r\n            </div>\r\n            <div className={styles.fieldWrapper}>\r\n                <span className={`${styles.fieldTitle} ${themeClassName}`}>{t('confirmPassword')}</span>\r\n                {createField(t('confirmYourPassword'), 'confirmPassword', 'password', [required], Input, 'new-password')}\r\n            </div>\r\n\r\n            <label className={`${styles.acceptOffer} ${themeClassName}`}>\r\n                <Field className={`${styles.checkbox} ${themeClassName}`} component={Input} name={'acceptOffer'}\r\n                       type={'checkbox'}/>\r\n                <span>{t('consentToProcessing')}</span>\r\n            </label>\r\n\r\n            {error && <div className={controlsStyles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n\r\n            <button>{t('signUp')}</button>\r\n\r\n            <div className={`${styles.signInBlock} ${themeClassName}`}>\r\n                <span>{t('alreadyHaveAccount')}</span>\r\n                <NavLink to={'/login'}>{t('getSignIn')}</NavLink>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst validate = (values: FormDataType) => {\r\n    const errors: FormErrors<FormDataType> = {};\r\n\r\n    if (values.password !== values.confirmPassword) {\r\n        errors.confirmPassword = 'The passwords don\\'t match';\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport const RegisterFormRedux = reduxForm<FormDataType>({\r\n    form: 'register', validate,\r\n})(RegisterForm);\r\n\r\nexport type FormDataType = {\r\n    login: string;\r\n    email: string;\r\n    password: string;\r\n    confirmPassword: string;\r\n    acceptOffer: boolean;\r\n}","import React, {FC} from 'react';\r\nimport {FormDataType, RegisterFormRedux} from './RegisterForm/RegisterForm';\r\nimport {connect} from 'react-redux';\r\nimport {register} from '../../redux/auth-reducer';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {ConfigProvider, message, theme} from 'antd';\r\nimport styles from '../Login/Login.module.scss';\r\nimport {useTranslation} from 'react-i18next';\r\nimport {useTheme} from '../../theme/useTheme';\r\n\r\nconst Register: FC<RegisterPropsType> = ({register}) => {\r\n    const {t} = useTranslation('auth');\r\n    const myTheme = useTheme().theme;\r\n    const themeClassName = myTheme === 'light' ? styles.light : styles.dark;\r\n    const [messageApi, contextHolder] = message.useMessage();\r\n    const history = useHistory();\r\n    const onSubmit = (formData: FormDataType) => {\r\n        register(formData.login, formData.email, formData.password, formData.acceptOffer)\r\n            .then(() => messageApi.success(`Thanks for signing up! We have sent an email with a confirmation link to ${formData.email}`))\r\n            .then(() => history.push('/login'))\r\n            .catch(e => alert(e.message));\r\n    };\r\n\r\n    return (\r\n        <main className={`${styles.main} ${themeClassName}`}>\r\n            <ConfigProvider theme={{algorithm: myTheme === 'light' ? theme.defaultAlgorithm : theme.darkAlgorithm}}>\r\n                {contextHolder}\r\n            </ConfigProvider>\r\n            <div className={`${styles.title} ${themeClassName}`}>\r\n                <h1>{t('createAccount')}</h1>\r\n                <span>{t('createAccountToContinue')}</span>\r\n            </div>\r\n            <div className={`${styles.register} ${themeClassName}`}>\r\n                <RegisterFormRedux onSubmit={onSubmit}/>\r\n            </div>\r\n        </main>\r\n    );\r\n};\r\n\r\ntype RegisterPropsType = {\r\n    register: (login: string, email: string, password: string, acceptOffer: boolean) => Promise<void>\r\n}\r\n\r\nexport default connect(null, {register})(Register);","import {Field, Validator, WrappedFieldProps} from 'redux-form';\r\nimport styles from './FormsControls.module.scss';\r\nimport React, {FC, ReactNode} from 'react';\r\nimport TextArea from 'antd/es/input/TextArea';\r\nimport {useTheme} from '../../../theme/useTheme';\r\n\r\ntype FormControlType = WrappedFieldProps & {\r\n    children: ReactNode;\r\n}\r\n\r\nconst FormControl: FC<FormControlType> = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea = (props: WrappedFieldProps) => {\r\n    const {input, meta, ...restProps} = props;\r\n    const {theme} = useTheme();\r\n    const themeClassName = theme === 'light' ? styles.light : styles.dark;\r\n\r\n    return (\r\n        <FormControl {...props}>\r\n            <TextArea className={`${styles.input} ${themeClassName}`}  {...input} {...restProps}/>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const Input = (props: WrappedFieldProps) => {\r\n    const {input, meta, ...restProps} = props;\r\n    const {theme} = useTheme();\r\n    const themeClassName = theme === 'light' ? styles.light : styles.dark;\r\n\r\n    return (\r\n        <FormControl {...props}>\r\n            <input className={`${styles.input} ${themeClassName}`} {...input} {...restProps}/>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const createField = (placeholder: string, name: string, type: string, validators: Validator[], component: ReactNode, autocomplete?: string, props = {}) => {\r\n    return (\r\n        <Field placeholder={placeholder} name={name} type={type} validate={validators}\r\n               component={component} autoComplete={autocomplete} {...props}/>\r\n    );\r\n};","export const required = (value: string) => {\r\n    return value ? undefined : 'Field is required';\r\n};\r\n\r\nexport const fieldsSame = (value1: string) => (value2: string) => {\r\n    return value1 === value2 ? undefined : 'Fields are not same';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    return value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Login_main__+nOO0\",\"light\":\"Login_light__uPQrD\",\"dark\":\"Login_dark__8ELld\",\"title\":\"Login_title__zXN9q\",\"login\":\"Login_login__mg93A\",\"register\":\"Login_register__tSR2G\",\"info\":\"Login_info__9twtE\",\"copiedTextTitle\":\"Login_copiedTextTitle__+T6Gw\",\"copiedText\":\"Login_copiedText__eNUfq\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__jI7Wq\",\"fieldWrapper\":\"LoginForm_fieldWrapper__xEAkr\",\"fieldTitle\":\"LoginForm_fieldTitle__VG-ri\",\"light\":\"LoginForm_light__54Cvz\",\"dark\":\"LoginForm_dark__dBXUr\",\"rememberMe\":\"LoginForm_rememberMe__jphOP\",\"acceptOffer\":\"LoginForm_acceptOffer__Z0LwE\",\"checkbox\":\"LoginForm_checkbox__bgBgj\",\"signUpBlock\":\"LoginForm_signUpBlock__7q-b8\",\"signInBlock\":\"LoginForm_signInBlock__JKQXI\"};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__7fIeb\",\"error\":\"FormsControls_error__KmL0f\",\"formSummaryError\":\"FormsControls_formSummaryError__4sOvX\",\"input\":\"FormsControls_input__Wooge\",\"light\":\"FormsControls_light__z4mZX\",\"dark\":\"FormsControls_dark__2R8LA\"};"],"names":["RegisterFormRedux","reduxForm","form","validate","values","errors","password","confirmPassword","handleSubmit","error","t","useTranslation","themeClassName","useTheme","theme","styles","className","onSubmit","createField","required","Input","Field","component","name","type","controlsStyles","to","connect","register","myTheme","message","messageApi","contextHolder","history","useHistory","algorithm","formData","login","email","acceptOffer","then","success","push","catch","e","alert","FormControl","input","meta","touched","children","hasError","Textarea","props","restProps","placeholder","validators","autocomplete","autoComplete","value","undefined"],"sourceRoot":""}