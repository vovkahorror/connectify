{"version":3,"file":"static/js/449.c874f17f.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Rd8Gt\",\"dialogs__items\":\"Dialogs_dialogs__items__mN3uO\",\"dialog\":\"Dialogs_dialog__lMLjy\",\"dialog_active\":\"Dialogs_dialog_active__s9zRb\",\"dialogs__messages\":\"Dialogs_dialogs__messages__fvzS0\",\"message\":\"Dialogs_message__MBn3-\"};","import styles from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n  name: string;\r\n  id: number;\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n  const path = `/dialogs/${props.id}`;\r\n\r\n  return (\r\n    <div className={`${styles.dialog} ${styles.dialog_active}`}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  )\r\n}","import styles from \"../Dialogs.module.css\";\r\n\r\ntype MessageType = {\r\n  message: string;\r\n}\r\nexport const Message = (props: MessageType) => {\r\n  return (\r\n    <div className={styles.message}>{props.message}</div>\r\n  )\r\n}","import {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {FC} from 'react';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\n\r\nexport type FormDataType = {\r\n    newMessageBody: string;\r\n}\r\n\r\nconst maxLength70 = maxLengthCreator(70);\r\n\r\nconst AddMessageForm: FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'newMessageBody'} validate={[required, maxLength70]}\r\n                       placeholder={'Enter your message'}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm);","import styles from './Dialogs.module.css';\r\nimport {DialogsPageType, sendMessageAC} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {ComponentType} from 'react';\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType;\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody));\r\n        },\r\n    };\r\n};\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);","import styles from './Dialogs.module.css';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {Message} from './Message/Message';\r\nimport {DialogsPageType} from '../../redux/dialogs-reducer';\r\nimport {AddMessageFormRedux, FormDataType} from './AddMessageForm/AddMessageForm';\r\n\r\ntype DialogsPropsType = {\r\n    sendMessage: (newMessageBody: string) => void;\r\n    dialogsPage: DialogsPageType;\r\n}\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    const state = props.dialogsPage;\r\n\r\n    const dialogsElements = state.dialogsData.map(dialog => {\r\n        return <DialogItem key={dialog.id} name={dialog.name} id={dialog.id}/>;\r\n    });\r\n\r\n    const messagesElements = state.messagesData.map(message => {\r\n        return <Message key={message.id} message={message.message}/>;\r\n    });\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogs__items}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={styles.dialogs__messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import {Field, Validator, WrappedFieldProps} from 'redux-form';\r\nimport styles from './FormsControls.module.css';\r\nimport React, {FC, ReactNode} from 'react';\r\n\r\ntype FormControlType = WrappedFieldProps & {\r\n    children: ReactNode;\r\n}\r\n\r\nconst FormControl: FC<FormControlType> = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea = (props: WrappedFieldProps) => {\r\n    const {input, meta, ...restProps} = props;\r\n\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n    );\r\n};\r\n\r\nexport const Input = (props: WrappedFieldProps) => {\r\n    const {input, meta, ...restProps} = props;\r\n\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    );\r\n};\r\n\r\nexport const createField = (placeholder: string, name: string, type: string, validators: Validator[], component: ReactNode, props = {}) => {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder} name={name} type={type} validate={validators}\r\n                   component={component} {...props}/>\r\n        </div>\r\n    );\r\n};","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype MapStateForRedirectType = {\r\n    isAuth: boolean;\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n};\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStateForRedirectType> {\r\n        render() {\r\n            const {isAuth, ...restProps} = this.props;\r\n\r\n            if (!isAuth) {\r\n                return <Redirect to={'/login'}/>;\r\n            }\r\n\r\n            return <Component {...restProps as T}/>;\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","export const required = (value: string) => {\r\n    return value ? undefined : 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    return value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__7Kujw\",\"error\":\"FormsControls_error__VtPjP\",\"formSummaryError\":\"FormsControls_formSummaryError__u1JdX\"};"],"names":["DialogItem","props","path","id","className","styles","to","name","Message","message","maxLength70","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","compose","connect","state","dialogsPage","dispatch","sendMessage","newMessageBody","sendMessageAC","withAuthRedirect","dialogsElements","dialogsData","map","dialog","messagesElements","messagesData","values","FormControl","input","meta","touched","error","children","hasError","restProps","Input","createField","type","validators","mapStateToPropsForRedirect","isAuth","auth","Component","RedirectComponent","this","React","value","undefined","maxLength","length"],"sourceRoot":""}