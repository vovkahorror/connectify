{"version":3,"file":"static/js/148.197f2cb3.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/Posts/Post/Post.module.css?59e2","components/Profile/Posts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/Posts/Posts.module.css?138f","components/Profile/Posts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Posts/PostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__4NJUd\",\"imageBlock\":\"ProfileInfo_imageBlock__YxCgd\",\"mainPhoto\":\"ProfileInfo_mainPhoto__u8rSU\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string;\r\n    updateStatus: (status: string) => void;\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => setEditMode(true);\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value);\r\n\r\n    return (\r\n        <>\r\n            {!editMode\r\n                ? <div><span onDoubleClick={activateEditMode}>{props.status || 'no status'}</span></div>\r\n                : <div><input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                              value={status}/></div>}\r\n        </>\r\n    );\r\n};","import {ContactsProfileAPIType, ProfileAPIType} from '../../../redux/profile-reducer';\r\nimport React from 'react';\r\n\r\nexport const ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataPropsType) => {\r\n    const mappedContacts = Object.keys(profile.contacts).map(key => {\r\n        const contactValue = profile.contacts[key as keyof ContactsProfileAPIType];\r\n        if (contactValue && key !== 'vk') {\r\n            return <Contact contactTitle={key} contactValue={contactValue} key={key}/>;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {isOwner && <button onClick={goToEditMode}>Edit</button>}\r\n            <h2>{profile.fullName}</h2>\r\n            <ul>\r\n                <li>About me: {profile.aboutMe}</li>\r\n                <li>Looking for a job: {profile.lookingForAJob ? 'yes' : 'no'}</li>\r\n                {profile.lookingForAJob && <li>My professional skills: {profile.lookingForAJobDescription}</li>}\r\n                <li>Contacts:\r\n                    <ul>\r\n                        {mappedContacts}\r\n                    </ul>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return (\r\n        <li>{contactTitle}: {contactValue}</li>\r\n    );\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileAPIType;\r\n    isOwner: boolean;\r\n    goToEditMode: () => void;\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string;\r\n    contactValue: string;\r\n}","import React, {FC} from 'react';\r\nimport {ContactsProfileAPIType, ProfileAPIType} from '../../../redux/profile-reducer';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, Input, Textarea} from '../../common/FormsControls/FormsControls';\r\nimport {required} from '../../../utils/validators/validators';\r\nimport controlsStyles from '../../common/FormsControls/FormsControls.module.css';\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileAPIType>> = ({initialValues: profile, handleSubmit, error}) => {\r\n    const mappedContacts = Object.keys(profile.contacts as ContactsProfileAPIType).map(key => {\r\n        if (key !== 'vk') {\r\n            return <li key={key}>\r\n                {key}: {createField(key, `contacts.${key}`, 'text', [], Input)}\r\n            </li>;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <form>\r\n            <button onClick={handleSubmit}>Save</button>\r\n            {error && <div className={controlsStyles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <ul>\r\n                <li>Full name: {createField('Full name', 'fullName', 'text', [required], Input)}</li>\r\n                <li>Looking for a job: {createField('', 'lookingForAJob', 'checkbox', [], Input)}</li>\r\n                <li>My professional\r\n                    skills: {createField('My professional skills', 'lookingForAJobDescription', 'text', [required], Textarea)}</li>\r\n                <li>About me: {createField('About me', 'aboutMe', 'text', [required], Textarea)}</li>\r\n                <li>Contacts:\r\n                    <ul>\r\n                        {mappedContacts}\r\n                    </ul>\r\n                </li>\r\n            </ul>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const ProfileDataFormRedux = reduxForm<ProfileAPIType>({form: 'edit-profile'})(ProfileDataForm);","import React, {ChangeEvent, useState} from 'react';\r\nimport styles from './ProfileInfo.module.css';\r\nimport {ProfileAPIType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport {ProfileData} from './ProfileData';\r\nimport {ProfileDataFormRedux} from './ProfileDataForm';\r\n\r\nexport const ProfileInfo = ({profile, status, isOwner, updateStatus, savePhoto, saveProfile}: ProfileInfoPropsType) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>;\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const onSubmit = (formData: ProfileAPIType) => {\r\n        saveProfile(formData).then(() => setEditMode(false)).catch(e => e);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.descriptionBlock}>\r\n                <div className={styles.imageBlock}><img className={styles.mainPhoto}\r\n                                                        src={profile.photos.large || userPhoto} alt=\"\"/>\r\n                    {isOwner &&\r\n                        <input type=\"file\" onChange={onMainPhotoSelected} accept=\".jpg, .jpeg, .png\"/>}\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n\r\n                {editMode\r\n                    ? <ProfileDataFormRedux initialValues={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileAPIType | null;\r\n    status: string;\r\n    updateStatus: (status: string) => void;\r\n    isOwner: boolean;\r\n    savePhoto: (file: File) => void;\r\n    saveProfile: (formData: ProfileAPIType) => Promise<boolean>;\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__ulIEf\"};","import React from \"react\";\r\nimport styles from './Post.module.css'\r\n\r\nexport type PostType = {\r\n  message: string;\r\n  likes: number;\r\n}\r\n\r\nexport const Post = (props: PostType) => {\r\n  return (\r\n    <div className={styles.item}>\r\n      <img src=\"https://www.terminal-a.com.ua/wp-content/uploads/2017/05/Koala.jpg\" alt=\"\"/>\r\n      <span>{props.message}</span> <span>Likes: {props.likes}</span>\r\n    </div>\r\n  )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"Posts_postsBlock__9oy-3\",\"posts\":\"Posts_posts__ErrKd\"};","import {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport React, {FC} from 'react';\r\nimport {maxLengthCreator, required} from '../../../../utils/validators/validators';\r\nimport {Textarea} from '../../../common/FormsControls/FormsControls';\r\n\r\nexport type FormDataType = {\r\n    newPostText: string;\r\n}\r\n\r\nconst maxLength70 = maxLengthCreator(70);\r\n\r\nconst AddNewPostForm: FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'newPostText'} validate={[required, maxLength70]}\r\n                       placeholder={'Post message'}/>\r\n            </div>\r\n            <button>Add post</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const AddNewPostFormRedux = reduxForm<FormDataType>({form: 'profileAddPostForm'})(AddNewPostForm);","import React, {memo} from 'react';\r\nimport {Post} from './Post/Post';\r\nimport styles from './Posts.module.css';\r\nimport {PostsDataType} from '../../../redux/profile-reducer';\r\nimport {AddNewPostFormRedux, FormDataType} from './AddNewPostForm/AddNewPostForm';\r\n\r\ntype PostsPropsType = {\r\n    addPost: (newPostText: string) => void;\r\n    postsData: Array<PostsDataType>;\r\n}\r\n\r\nexport const Posts = memo((props: PostsPropsType) => {\r\n    const postsElements = props.postsData.map(post => {\r\n        return <Post key={post.id} message={post.message} likes={post.likes}/>;\r\n    });\r\n\r\n    const onAddPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import React from \"react\";\r\nimport {addPostAC, PostsDataType} from \"../../../redux/profile-reducer\";\r\nimport {Posts} from \"./Posts\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    postsData: PostsDataType[];\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText));\r\n        },\r\n    };\r\n};\r\n\r\nexport const PostsContainer = connect(mapStateToProps, mapDispatchToProps)(Posts);","import React from 'react';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {PostsContainer} from './Posts/PostsContainer';\r\nimport {ProfileAPIType} from '../../redux/profile-reducer';\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <main>\r\n            <ProfileInfo {...props}/>\r\n            <PostsContainer/>\r\n        </main>\r\n    );\r\n};\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileAPIType | null;\r\n    status: string;\r\n    isOwner: boolean;\r\n    updateStatus: (status: string) => void;\r\n    savePhoto: (file: File) => void;\r\n    saveProfile: (formData: ProfileAPIType) => Promise<boolean>;\r\n}","import React, {ComponentType} from 'react';\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    ProfileAPIType,\r\n    ProfilePageType,\r\n    savePhoto, saveProfile,\r\n    updateStatus,\r\n} from '../../redux/profile-reducer';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\n\r\ntype PathParamsType = {\r\n    userID: string;\r\n}\r\ntype MapStateToPropsType = {\r\n    profile: ProfileAPIType | null;\r\n    status: string;\r\n    authorizedUserID: number | null;\r\n    isAuth: boolean;\r\n    isFetching: boolean;\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userID: number) => void;\r\n    getStatus: (userID: number) => void;\r\n    updateStatus: (status: string) => void;\r\n    savePhoto: (file: File) => void;\r\n    saveProfile: (formData: ProfileAPIType) => Promise<boolean>;\r\n}\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType;\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & OwnPropsType;\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, ProfilePageType> {\r\n    refreshProfile() {\r\n        let userID = +this.props.match.params.userID;\r\n        if (!userID) {\r\n            userID = this.props.authorizedUserID as number;\r\n        }\r\n        this.props.getUserProfile(userID);\r\n        this.props.getStatus(userID);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>) {\r\n        if (this.props.match.params.userID !== prevProps.match.params.userID) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Profile isOwner={!this.props.match.params.userID} {...this.props}/>\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserID: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n        isFetching: state.app.isFetching,\r\n    };\r\n};\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n}), withRouter, withAuthRedirect)(ProfileContainer);","import {Field, Validator, WrappedFieldProps} from 'redux-form';\r\nimport styles from './FormsControls.module.css';\r\nimport React, {FC, ReactNode} from 'react';\r\n\r\ntype FormControlType = WrappedFieldProps & {\r\n    children: ReactNode;\r\n}\r\n\r\nconst FormControl: FC<FormControlType> = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea = (props: WrappedFieldProps) => {\r\n    const {input, meta, ...restProps} = props;\r\n\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n    );\r\n};\r\n\r\nexport const Input = (props: WrappedFieldProps) => {\r\n    const {input, meta, ...restProps} = props;\r\n\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    );\r\n};\r\n\r\nexport const createField = (placeholder: string, name: string, type: string, validators: Validator[], component: ReactNode, props = {}) => {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder} name={name} type={type} validate={validators}\r\n                   component={component} {...props}/>\r\n        </div>\r\n    );\r\n};","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype MapStateForRedirectType = {\r\n    isAuth: boolean;\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n};\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStateForRedirectType> {\r\n        render() {\r\n            const {isAuth, ...restProps} = this.props;\r\n\r\n            if (!isAuth) {\r\n                return <Redirect to={'/login'}/>;\r\n            }\r\n\r\n            return <Component {...restProps as T}/>;\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","export const required = (value: string) => {\r\n    return value ? undefined : 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    return value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__7Kujw\",\"error\":\"FormsControls_error__VtPjP\",\"formSummaryError\":\"FormsControls_formSummaryError__u1JdX\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","onDoubleClick","ProfileData","profile","isOwner","goToEditMode","mappedContacts","Object","keys","contacts","map","key","contactValue","Contact","contactTitle","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","ProfileDataFormRedux","reduxForm","form","initialValues","handleSubmit","error","createField","Input","className","controlsStyles","required","Textarea","ProfileInfo","savePhoto","saveProfile","Preloader","styles","src","photos","large","userPhoto","alt","type","target","files","length","accept","onSubmit","formData","then","catch","Post","message","likes","maxLength70","maxLengthCreator","AddNewPostFormRedux","Field","component","name","validate","placeholder","Posts","memo","postsElements","postsData","post","id","values","addPost","newPostText","PostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userID","this","match","params","authorizedUserID","getUserProfile","getStatus","refreshProfile","prevProps","isFetching","React","compose","auth","isAuth","app","withRouter","withAuthRedirect","FormControl","input","meta","touched","children","hasError","restProps","validators","mapStateToPropsForRedirect","Component","RedirectComponent","to","undefined","maxLength","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}