{"version":3,"file":"static/js/344.8ea8c4c1.chunk.js","mappings":"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","sources":["components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/Login/Login.module.scss?4086","webpack://samurai-way/./src/components/Login/LoginForm/LoginForm.module.scss?ebd6","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.scss?b614"],"sourcesContent":["import React, {FC} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, Input} from '../../common/FormsControls/FormsControls';\r\nimport {required} from '../../../utils/validators/validators';\r\nimport controlsStyles from '../../common/FormsControls/FormsControls.module.scss';\r\nimport styles from './LoginForm.module.scss';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst LoginForm: FC<InjectedFormProps<FormDataType>> = ({initialValues: {captcha}, handleSubmit, error}) => {\r\n    return (\r\n        <form className={styles.form} onSubmit={handleSubmit}>\r\n            <div>\r\n                <span className={styles.fieldTitle}>Email</span>\r\n                {createField('Your Email', 'email', 'text', [required], Input)}\r\n            </div>\r\n            <div>\r\n                <span className={styles.fieldTitle}>Password</span>\r\n                {createField('Inter Password', 'password', 'password', [required], Input)}\r\n            </div>\r\n\r\n            <label className={styles.rememberMe}>\r\n                <Field component={Input} name={'rememberMe'} type={'checkbox'}/>\r\n                <span>Remember me</span>\r\n            </label>\r\n\r\n            {captcha && <div>\r\n                <img src={captcha} alt={'captcha'}/>\r\n                {createField('Symbols from image', 'captcha', 'text', [required], Input)}\r\n            </div>}\r\n\r\n            {error && <div className={controlsStyles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n\r\n            <button>Sign In</button>\r\n\r\n            <div className={styles.signUpBlock}>\r\n                <span>Don't have an account?</span>\r\n                <NavLink to={'/register'}>Sign Up</NavLink>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const LoginFormRedux = reduxForm<FormDataType>({\r\n    form: 'login',\r\n})(LoginForm);\r\n\r\nexport type FormDataType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha?: string | null;\r\n}","import React, {FC} from 'react';\r\nimport {FormDataType, LoginFormRedux} from './LoginForm/LoginForm';\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport styles from './Login.module.scss';\r\nimport Paragraph from 'antd/es/typography/Paragraph';\r\n\r\ntype MapStateToPropsType = {\r\n    captcha?: string | null;\r\n    isAuth: boolean;\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha?: string | null) => Promise<void>;\r\n}\r\n\r\ntype LoginPropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\nconst Login: FC<LoginPropsType> = ({login, isAuth, captcha}) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n    };\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>;\r\n    }\r\n\r\n    return (\r\n        <main className={styles.main}>\r\n            <div className={styles.title}>\r\n                <h1>Sign In</h1>\r\n                <span>Welcome back, youâ€™ve been missed!</span>\r\n            </div>\r\n\r\n            <div className={styles.login}>\r\n                <LoginFormRedux onSubmit={onSubmit} initialValues={{captcha}}/>\r\n            </div>\r\n\r\n            <div className={styles.info}>\r\n                <span>You can <NavLink to={'/register'}>create your personal account</NavLink>, or if you just want to test the possibilities of our social network, use your demo account details to login:</span>\r\n                <div>\r\n                    <span className={styles.copiedTextTitle}>Login:</span>\r\n                    <Paragraph className={styles.copiedText} copyable>free@samuraijs.com</Paragraph>\r\n                </div>\r\n                <div>\r\n                    <span className={styles.copiedTextTitle}>Password:</span>\r\n                    <Paragraph className={styles.copiedText} copyable>free</Paragraph>\r\n                </div>\r\n            </div>\r\n        </main>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        captcha: state.auth.captcha,\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import {Field, Validator, WrappedFieldProps} from 'redux-form';\r\nimport styles from './FormsControls.module.scss';\r\nimport React, {FC, ReactNode} from 'react';\r\nimport TextArea from 'antd/es/input/TextArea';\r\n\r\ntype FormControlType = WrappedFieldProps & {\r\n    children: ReactNode;\r\n}\r\n\r\nconst FormControl: FC<FormControlType> = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea = (props: WrappedFieldProps) => {\r\n    const {input, meta, ...restProps} = props;\r\n\r\n    return (\r\n        <FormControl {...props}><TextArea  {...input} {...restProps}/></FormControl>\r\n    );\r\n};\r\n\r\nexport const Input = (props: WrappedFieldProps) => {\r\n    const {input, meta, ...restProps} = props;\r\n\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    );\r\n};\r\n\r\nexport const createField = (placeholder: string, name: string, type: string, validators: Validator[], component: ReactNode, autocomplete?: string, props = {}) => {\r\n    return (\r\n        <Field placeholder={placeholder} name={name} type={type} validate={validators}\r\n               component={component} autoComplete={autocomplete} {...props}/>\r\n    );\r\n};","export const required = (value: string) => {\r\n    return value ? undefined : 'Field is required';\r\n};\r\n\r\nexport const fieldsSame = (value1: string) => (value2: string) => {\r\n    return value1 === value2 ? undefined : 'Fields are not same';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    return value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Login_main__SC62-\",\"title\":\"Login_title__DJfgF\",\"login\":\"Login_login__e0fTV\",\"register\":\"Login_register__rwRY4\",\"info\":\"Login_info__xF4tM\",\"copiedTextTitle\":\"Login_copiedTextTitle__tB7b8\",\"copiedText\":\"Login_copiedText__3xPjd\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__x-3E0\",\"fieldTitle\":\"LoginForm_fieldTitle__1UBj3\",\"rememberMe\":\"LoginForm_rememberMe__iQSbv\",\"acceptOffer\":\"LoginForm_acceptOffer__xCTkB\",\"signUpBlock\":\"LoginForm_signUpBlock__2GXyv\",\"signInBlock\":\"LoginForm_signInBlock__Wocg5\"};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__+x4n4\",\"error\":\"FormsControls_error__Y+Msb\",\"formSummaryError\":\"FormsControls_formSummaryError__DmsBu\"};"],"names":["LoginFormRedux","reduxForm","form","captcha","initialValues","handleSubmit","error","className","styles","onSubmit","createField","required","Input","Field","component","name","type","src","alt","controlsStyles","to","connect","state","auth","isAuth","login","formData","email","password","rememberMe","Paragraph","copyable","FormControl","input","meta","touched","children","hasError","Textarea","props","restProps","placeholder","validators","autocomplete","validate","autoComplete","value","undefined"],"sourceRoot":""}