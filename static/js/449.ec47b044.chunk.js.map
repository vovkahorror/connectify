{"version":3,"file":"static/js/449.ec47b044.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Rd8Gt\",\"dialogs__items\":\"Dialogs_dialogs__items__mN3uO\",\"dialog\":\"Dialogs_dialog__lMLjy\",\"dialog_active\":\"Dialogs_dialog_active__s9zRb\",\"dialogs__messages\":\"Dialogs_dialogs__messages__fvzS0\",\"message\":\"Dialogs_message__MBn3-\"};","import styles from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n  name: string;\r\n  id: number;\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n  const path = `/dialogs/${props.id}`;\r\n\r\n  return (\r\n    <div className={`${styles.dialog} ${styles.dialog_active}`}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  )\r\n}","import styles from \"../Dialogs.module.css\";\r\n\r\ntype MessageType = {\r\n  message: string;\r\n}\r\nexport const Message = (props: MessageType) => {\r\n  return (\r\n    <div className={styles.message}>{props.message}</div>\r\n  )\r\n}","import {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {FC} from 'react';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\n\r\nexport type FormDataType = {\r\n    newMessageBody: string;\r\n}\r\n\r\nconst maxLength70 = maxLengthCreator(70);\r\n\r\nconst AddMessageForm: FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'newMessageBody'} validate={[required, maxLength70]}\r\n                       placeholder={'Enter your message'}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm);","import styles from './Dialogs.module.css';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {Message} from './Message/Message';\r\nimport {DialogsPageType} from '../../redux/dialogs-reducer';\r\nimport {AddMessageFormRedux, FormDataType} from './AddMessageForm/AddMessageForm';\r\nimport {FC} from 'react';\r\n\r\nexport const Dialogs: FC<DialogsPropsType> = ({userID, sendMessage, dialogsPage}) => {\r\n    const state = dialogsPage;\r\n\r\n    const dialogsElements = state.dialogsData.map(dialog => {\r\n        return <DialogItem key={dialog.id} name={dialog.userName} id={dialog.id}/>;\r\n    });\r\n\r\n    const messagesElements = state.messagesData.map(message => {\r\n        return <Message key={message.id} message={message.message}/>;\r\n    });\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n        sendMessage(userID, values.newMessageBody);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogs__items}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={styles.dialogs__messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype DialogsPropsType = {\r\n    userID: number;\r\n    sendMessage: (userID: number, newMessageBody: string) => void;\r\n    dialogsPage: DialogsPageType;\r\n}\r\n\r\n","import {DialogsPageType, requestDialogs, sendMessage} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport React, {ComponentType} from 'react';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {PathParamsType} from '../Profile/ProfileContainer';\r\n\r\nclass DialogsContainer extends React.Component<DialogsContainerPropsType> {\r\n    componentDidMount() {\r\n        this.props.requestDialogs();\r\n    }\r\n\r\n    render() {\r\n        const userID = +this.props.match.params.userID;\r\n\r\n        return <Dialogs userID={userID} {...this.props} />;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    };\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType;\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    requestDialogs: () => void;\r\n    sendMessage: (userID: number, newMessageBody: string) => void;\r\n}\r\n\r\ntype DialogsContainerPropsType = RouteComponentProps<PathParamsType> & MapStateToPropsType & MapDispatchToPropsType;\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps, {\r\n    requestDialogs,\r\n    sendMessage,\r\n}), withRouter, withAuthRedirect)(DialogsContainer);","import {Field, Validator, WrappedFieldProps} from 'redux-form';\r\nimport styles from './FormsControls.module.css';\r\nimport React, {FC, ReactNode} from 'react';\r\nimport TextArea from 'antd/es/input/TextArea';\r\n\r\ntype FormControlType = WrappedFieldProps & {\r\n    children: ReactNode;\r\n}\r\n\r\nconst FormControl: FC<FormControlType> = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea = (props: WrappedFieldProps) => {\r\n    const {input, meta, ...restProps} = props;\r\n\r\n    return (\r\n        <FormControl {...props}><TextArea  {...input} {...restProps}/></FormControl>\r\n    );\r\n};\r\n\r\nexport const Input = (props: WrappedFieldProps) => {\r\n    const {input, meta, ...restProps} = props;\r\n\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    );\r\n};\r\n\r\nexport const createField = (placeholder: string, name: string, type: string, validators: Validator[], component: ReactNode, props = {}) => {\r\n    return (\r\n        <Field placeholder={placeholder} name={name} type={type} validate={validators}\r\n               component={component} {...props}/>\r\n    );\r\n};","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype MapStateForRedirectType = {\r\n    isAuth: boolean;\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n};\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStateForRedirectType> {\r\n        render() {\r\n            const {isAuth, ...restProps} = this.props;\r\n\r\n            if (!isAuth) {\r\n                return <Redirect to={'/login'}/>;\r\n            }\r\n\r\n            return <Component {...restProps as T}/>;\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","export const required = (value: string) => {\r\n    return value ? undefined : 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    return value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__7Kujw\",\"error\":\"FormsControls_error__VtPjP\",\"formSummaryError\":\"FormsControls_formSummaryError__u1JdX\"};"],"names":["DialogItem","props","path","id","className","styles","to","name","Message","message","maxLength70","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","userID","sendMessage","state","dialogsPage","dialogsElements","dialogsData","map","dialog","userName","messagesElements","messagesData","values","newMessageBody","DialogsContainer","this","requestDialogs","match","params","React","compose","connect","withRouter","withAuthRedirect","FormControl","input","meta","touched","error","children","hasError","restProps","Input","createField","type","validators","mapStateToPropsForRedirect","isAuth","auth","Component","RedirectComponent","value","undefined","maxLength","length"],"sourceRoot":""}