{"version":3,"file":"static/js/432.9ff79764.chunk.js","mappings":"6LAeMA,EAAW,WACb,IAAMC,GAASC,EAAAA,EAAAA,KAAsC,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UACnEI,GAAWC,EAAAA,EAAAA,MAUjB,OARAC,EAAAA,EAAAA,YAAU,WAGN,OAFAF,GAASG,EAAAA,EAAAA,OAEF,WACHH,GAASI,EAAAA,EAAAA,UAEd,CAACJ,KAGA,2BACgB,UAAXJ,IAAsB,2EACvB,SAACS,EAAD,KACA,SAACC,EAAD,QAKND,EAAe,WACjB,IAAME,GAAWV,EAAAA,EAAAA,KAA6C,SAAAC,GAAK,OAAIA,EAAMC,KAAKQ,YAC5EC,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,UAYA,OANAT,EAAAA,EAAAA,YAAU,WACa,IAAD,EAAdS,IACA,UAAAH,EAAkBI,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACH,EAAcJ,KAGd,iBAAKQ,MAAO,CAACC,OAAQ,OAAQC,UAAW,UAAWC,SAXjC,SAACC,KAWnB,UACKZ,EAASa,KAAI,SAAAC,GAAC,OACX,SAACC,GAAD,UAAwBD,IAAVE,EAAAA,EAAAA,UAElB,gBAAKC,IAAKhB,QAKhBc,EAA+B,SAAC,GAAuC,EAAtCG,OAAuC,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,QAC5D,OACI,4BACI,gBAAKC,IAAKH,EAAOI,IAAI,MACrB,0BAAOH,KACP,0BAAOC,QAKbtB,EAAqB,WACvB,OAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOkB,EAAP,KAAgBG,EAAhB,KACMnC,GAASC,EAAAA,EAAAA,KAAsC,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UACnEI,GAAWC,EAAAA,EAAAA,MAWjB,OACI,4BACI,qBAAU+B,MAAOJ,EAASK,SAAU,SAACd,GAAD,OAAOY,EAAWZ,EAAEe,cAAcF,WACtE,mBAAQG,SAAqB,UAAXvC,EAAoBwC,QAZnB,WAClBR,EAAQS,SAIbrC,GAASsC,EAAAA,EAAAA,IAAYV,IACrBG,EAAW,MAMP,sBAKZ,UAtFqB,WACjB,OACI,gBAAKhB,MAAO,CAACwB,QAAS,OAAQC,cAAe,UAA7C,UACI,SAAC7C,EAAD","sources":["components/Chat/ChatPage.tsx"],"sourcesContent":["import React, {FC, useEffect, useRef, useState, UIEvent} from 'react';\r\nimport {v1} from 'uuid';\r\nimport {ChatMessageType, StatusType} from '../../api/chat-api';\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from '../../redux/chat-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\nconst ChatPage: FC = () => {\r\n    return (\r\n        <div style={{display: 'flex', flexDirection: 'column'}}>\r\n            <Chat/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Chat: FC = () => {\r\n    const status = useSelector<AppStateType, StatusType>(state => state.chat.status);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening());\r\n\r\n        return () => {\r\n            dispatch(stopMessagesListening());\r\n        };\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div>\r\n            {status === 'error' && <div>Some error occurred. Please refresh the page</div>}\r\n            <Messages/>\r\n            <AddMessageForm/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Messages: FC = () => {\r\n    const messages = useSelector<AppStateType, ChatMessageType[]>(state => state.chat.messages);\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [isAutoScroll, setIsAutoScroll] = useState(false);\r\n\r\n    const scrollHandler = (e: UIEvent<HTMLDivElement>) => {\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'});\r\n        }\r\n    }, [isAutoScroll, messages]);\r\n\r\n    return (\r\n        <div style={{height: '80vh', overflowY: 'scroll'}} onScroll={scrollHandler}>\r\n            {messages.map(m =>\r\n                <Message key={v1()} {...m}/>,\r\n            )}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Message: FC<ChatMessageType> = ({userId, photo, userName, message}) => {\r\n    return (\r\n        <div>\r\n            <img src={photo} alt=\"\"/>\r\n            <span>{userName}</span>\r\n            <span>{message}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst AddMessageForm: FC = () => {\r\n    const [message, setMessage] = useState('');\r\n    const status = useSelector<AppStateType, StatusType>(state => state.chat.status);\r\n    const dispatch = useDispatch();\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message.trim()) {\r\n            return;\r\n        }\r\n\r\n        dispatch(sendMessage(message));\r\n        setMessage('');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <textarea value={message} onChange={(e) => setMessage(e.currentTarget.value)}></textarea>\r\n            <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatPage;"],"names":["Chat","status","useSelector","state","chat","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","map","m","Message","v1","ref","userId","photo","userName","message","src","alt","setMessage","value","onChange","currentTarget","disabled","onClick","trim","sendMessage","display","flexDirection"],"sourceRoot":""}