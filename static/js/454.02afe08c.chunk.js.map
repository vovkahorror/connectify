{"version":3,"file":"static/js/454.02afe08c.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/DialogsList/DialogItem/DialogItem.module.scss?11bd","components/Dialogs/DialogsList/DialogItem/DialogItem.tsx","webpack://samurai-way/./src/components/Dialogs/DialogsList/DialogsList.module.scss?369e","components/Dialogs/DialogsList/DialogsList.tsx","components/Dialogs/MessagesList/AddMessageForm/AddMessageForm.tsx","webpack://samurai-way/./src/components/Dialogs/MessagesList/Message/Message.module.scss?340e","components/Dialogs/MessagesList/Message/Message.tsx","webpack://samurai-way/./src/components/Dialogs/MessagesList/MessagesList.module.scss?faac","components/Dialogs/MessagesList/MessagesList.tsx","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.scss?d037","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/date-helpers.ts","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogItem\":\"DialogItem_dialogItem__QQXtt\",\"active\":\"DialogItem_active__M+faD\",\"photo\":\"DialogItem_photo__q8K1n\",\"userName\":\"DialogItem_userName__VmSNl\",\"lastActivityDate\":\"DialogItem_lastActivityDate__Az5K+\",\"newMessagesCount\":\"DialogItem_newMessagesCount__BU0xr\"};","import styles from './DialogItem.module.scss';\r\nimport {NavLink} from 'react-router-dom';\r\nimport UserNoPhoto from '../../../../assets/images/user.svg';\r\nimport {FC} from 'react';\r\nimport {setTimezoneOffsetDate, toFormatDate, toFormatTime} from '../../../../utils/date-helpers';\r\n\r\nexport const DialogItem: FC<DialogItemType> = ({userName, userPhoto, id, lastDialogActivityDate, newMessagesCount}) => {\r\n    const path = `/dialogs/${id}`;\r\n\r\n    const customizedDate = setTimezoneOffsetDate(lastDialogActivityDate);\r\n    const date = toFormatDate(customizedDate);\r\n    const time = toFormatTime(customizedDate);\r\n\r\n    return (\r\n        <NavLink className={styles.dialogItem} activeClassName={styles.active} to={path}>\r\n            <img className={styles.photo} src={userPhoto || UserNoPhoto} alt=\"userPhoto\"/>\r\n            <span>{userName}</span>\r\n            <span className={styles.lastActivityDate}>\r\n                <span>{date}</span>\r\n                <span>{time}</span>\r\n            </span>\r\n            {!!newMessagesCount && <span className={styles.newMessagesCount}>{newMessagesCount}</span>}\r\n        </NavLink>\r\n    );\r\n};\r\n\r\ntype DialogItemType = {\r\n    userName: string;\r\n    userPhoto: string | null;\r\n    id: number;\r\n    lastDialogActivityDate: string;\r\n    newMessagesCount: number;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogsList\":\"DialogsList_dialogsList__bxiuy\"};","import React, {FC} from 'react';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {DialogsPageType} from '../../../redux/dialogs-reducer';\r\nimport styles from './DialogsList.module.scss';\r\n\r\nconst DialogsList: FC<DialogsListPropsType> = ({state}) => {\r\n    const dialogsElements = state.dialogsData.map(dialog => {\r\n        return <DialogItem key={dialog.id}\r\n                           userName={dialog.userName}\r\n                           userPhoto={dialog.photos.large}\r\n                           lastDialogActivityDate={dialog.lastDialogActivityDate}\r\n                           id={dialog.id}\r\n                           newMessagesCount={dialog.newMessagesCount}/>;\r\n    });\r\n\r\n    return (\r\n        <div className={styles.dialogsList}>\r\n            {dialogsElements}\r\n        </div>\r\n    );\r\n};\r\n\r\ntype DialogsListPropsType = {\r\n    state: DialogsPageType;\r\n}\r\n\r\nexport default DialogsList;","import {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {FC} from 'react';\r\nimport {Textarea} from '../../../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../../../utils/validators/validators';\r\n\r\nexport type FormDataType = {\r\n    newMessageBody: string;\r\n}\r\n\r\nconst maxLength70 = maxLengthCreator(70);\r\n\r\nconst AddMessageForm: FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'newMessageBody'} validate={[required, maxLength70]}\r\n                       placeholder={'Enter your message'}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm);","// extracted by mini-css-extract-plugin\nexport default {\"messageBlock\":\"Message_messageBlock__Ql1s6\",\"ownerMessageBlock\":\"Message_ownerMessageBlock__UuiGu\",\"messageContent\":\"Message_messageContent__Y+-2m\",\"messageText\":\"Message_messageText__s1Meb\",\"photo\":\"Message_photo__fdZw0\"};","import styles from './Message.module.scss';\r\nimport {FC} from 'react';\r\nimport userNoPhoto from '../../../../assets/images/user.svg';\r\n\r\nexport const Message: FC<MessageType> = ({message, senderID, userID, userPhoto, authUserID, authUserPhoto}) => {\r\n    const isMyMessage = senderID === authUserID;\r\n    const photo = (isMyMessage ? authUserPhoto : userPhoto) || userNoPhoto;\r\n\r\n    return (\r\n        <div className={isMyMessage ? styles.ownerMessageBlock : styles.messageBlock}>\r\n            <img className={styles.photo} src={photo} alt=\"\"/>\r\n            <div className={styles.messageContent}>\r\n                <span className={styles.messageText}>{message}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype MessageType = {\r\n    message: string;\r\n    senderID: number;\r\n    userID: number;\r\n    userPhoto?: string | null;\r\n    authUserID: number | null;\r\n    authUserPhoto?: string | null;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"messagesList\":\"MessagesList_messagesList__OTgzv\",\"messagesListHeader\":\"MessagesList_messagesListHeader__GWLY1\",\"userPhoto\":\"MessagesList_userPhoto__0QJFq\",\"userInfo\":\"MessagesList_userInfo__DeXKp\",\"userName\":\"MessagesList_userName__S5ks1\",\"userActivity\":\"MessagesList_userActivity__CnzIS\",\"messagesListBody\":\"MessagesList_messagesListBody__CBIRN\"};","import React, {FC, useEffect} from 'react';\r\nimport {AddMessageFormRedux, FormDataType} from './AddMessageForm/AddMessageForm';\r\nimport {Message} from './Message/Message';\r\nimport {DialogsPageType} from '../../../redux/dialogs-reducer';\r\nimport {setTimezoneOffsetDate, toFormatDate, toFormatTime} from '../../../utils/date-helpers';\r\nimport userNoPhoto from '../../../assets/images/user.svg';\r\nimport styles from './MessagesList.module.scss';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst MessagesList: FC<MessagesListPropsType> = ({\r\n                                                     state,\r\n                                                     userID,\r\n                                                     authUserID,\r\n                                                     authUserPhoto,\r\n                                                     requestMessages,\r\n                                                     sendMessage,\r\n                                                 }) => {\r\n    const userName = state.dialogsData.find(dialog => dialog.id === userID)?.userName;\r\n    const userPhoto = state.dialogsData.find(dialog => dialog.id === userID)?.photos.large;\r\n    const lastUserActivityDate = state.dialogsData.find(dialog => dialog.id === userID)?.lastUserActivityDate;\r\n\r\n    const customizedDate = lastUserActivityDate && setTimezoneOffsetDate(lastUserActivityDate);\r\n    const date = customizedDate && toFormatDate(customizedDate);\r\n    const time = customizedDate && toFormatTime(customizedDate);\r\n\r\n    const messagesElements = state.messagesData.map(message => {\r\n        return <Message key={message.id} message={message.body} senderID={message.senderId} userID={userID}\r\n                        userPhoto={userPhoto}\r\n                        authUserID={authUserID}\r\n                        authUserPhoto={authUserPhoto}/>;\r\n    });\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n        sendMessage(userID, values.newMessageBody);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (userID) {\r\n            requestMessages(userID);\r\n        }\r\n    }, [userID]);\r\n\r\n    return (\r\n        <div className={styles.messagesList}>\r\n            <div className={styles.messagesListHeader}>\r\n                <NavLink className={styles.userName} to={`/profile/${userID}`}>\r\n                    <img className={styles.userPhoto} src={userPhoto || userNoPhoto} alt=\"\"/>\r\n                </NavLink>\r\n                <div className={styles.userInfo}>\r\n                    <NavLink className={styles.userName} to={`/profile/${userID}`}>\r\n                        <h2 className={styles.userName}>{userName}</h2>\r\n                    </NavLink>\r\n                    <span className={styles.userActivity}>Was online on {date} at {time}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={styles.messagesListBody}>\r\n                {messagesElements}\r\n            </div>\r\n\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype MessagesListPropsType = {\r\n    state: DialogsPageType;\r\n    userID: number;\r\n    authUserID: number | null;\r\n    authUserPhoto?: string | null;\r\n    requestMessages: (userID: number) => Promise<void>;\r\n    sendMessage: (userID: number, message: string) => Promise<void>;\r\n}\r\n\r\nexport default MessagesList;","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__DK6nC\"};","import {DialogsPageType} from '../../redux/dialogs-reducer';\r\nimport React, {FC, useEffect} from 'react';\r\nimport DialogsList from './DialogsList/DialogsList';\r\nimport MessagesList from './MessagesList/MessagesList';\r\nimport styles from './Dialogs.module.scss';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nexport const Dialogs: FC<DialogsPropsType> = ({\r\n                                                  userID,\r\n                                                  dialogsPage,\r\n                                                  authUserID,\r\n                                                  authUserPhoto,\r\n                                                  requestMessages,\r\n                                                  sendMessage,\r\n                                              }) => {\r\n    const history = useHistory();\r\n    const state = dialogsPage;\r\n\r\n    useEffect(() => {\r\n        if (state.dialogsData.length) {\r\n            history.push(`/dialogs/${state.dialogsData[0].id}`);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <DialogsList state={state}/>\r\n            <MessagesList state={state} userID={userID} authUserPhoto={authUserPhoto} authUserID={authUserID}\r\n                          requestMessages={requestMessages}\r\n                          sendMessage={sendMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype DialogsPropsType = {\r\n    userID: number;\r\n    dialogsPage: DialogsPageType;\r\n    authUserID: number | null;\r\n    authUserPhoto?: string | null;\r\n    requestMessages: (userID: number) => Promise<void>;\r\n    sendMessage: (userID: number, newMessageBody: string) => Promise<void>;\r\n}\r\n\r\n","import {DialogsPageType, requestDialogs, requestMessages, sendMessage} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport React, {ComponentType} from 'react';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {PathParamsType} from '../Profile/ProfileContainer';\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\n\r\nclass DialogsContainer extends React.Component<DialogsContainerPropsType> {\r\n    componentDidMount() {\r\n        this.props.requestDialogs();\r\n    }\r\n\r\n    render() {\r\n        const userID = +this.props.match.params.userID;\r\n\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Dialogs userID={userID} {...this.props} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        authUserID: state.auth.id,\r\n        authUserPhoto: state.auth.photo,\r\n        isFetching: state.app.isFetching,\r\n    };\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType;\r\n    authUserID: number | null;\r\n    authUserPhoto?: string | null;\r\n    isFetching: boolean;\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    requestDialogs: () => Promise<void>;\r\n    requestMessages: (userID: number) => Promise<void>;\r\n    sendMessage: (userID: number, newMessageBody: string) => Promise<void>;\r\n}\r\n\r\ntype DialogsContainerPropsType = RouteComponentProps<PathParamsType> & MapStateToPropsType & MapDispatchToPropsType;\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps, {\r\n    requestDialogs,\r\n    requestMessages,\r\n    sendMessage,\r\n}), withRouter, withAuthRedirect)(DialogsContainer);","import {Field, Validator, WrappedFieldProps} from 'redux-form';\r\nimport styles from './FormsControls.module.css';\r\nimport React, {FC, ReactNode} from 'react';\r\nimport TextArea from 'antd/es/input/TextArea';\r\n\r\ntype FormControlType = WrappedFieldProps & {\r\n    children: ReactNode;\r\n}\r\n\r\nconst FormControl: FC<FormControlType> = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea = (props: WrappedFieldProps) => {\r\n    const {input, meta, ...restProps} = props;\r\n\r\n    return (\r\n        <FormControl {...props}><TextArea  {...input} {...restProps}/></FormControl>\r\n    );\r\n};\r\n\r\nexport const Input = (props: WrappedFieldProps) => {\r\n    const {input, meta, ...restProps} = props;\r\n\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    );\r\n};\r\n\r\nexport const createField = (placeholder: string, name: string, type: string, validators: Validator[], component: ReactNode, props = {}) => {\r\n    return (\r\n        <Field placeholder={placeholder} name={name} type={type} validate={validators}\r\n               component={component} {...props}/>\r\n    );\r\n};","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype MapStateForRedirectType = {\r\n    isAuth: boolean;\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n};\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStateForRedirectType> {\r\n        render() {\r\n            const {isAuth, ...restProps} = this.props;\r\n\r\n            if (!isAuth) {\r\n                return <Redirect to={'/login'}/>;\r\n            }\r\n\r\n            return <Component {...restProps as T}/>;\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","export const setTimezoneOffsetDate = (date: string | Date) => {\r\n    const serverDate = new Date(date);\r\n    const timeZoneOffset = Math.abs(serverDate.getTimezoneOffset());\r\n    serverDate.setMinutes(serverDate.getMinutes() + timeZoneOffset);\r\n    return serverDate;\r\n};\r\n\r\nexport const toFormatDate = (date: string | Date) => {\r\n    return new Date(date).toLocaleDateString('en-GB', {\r\n        day: 'numeric',\r\n        month: 'long',\r\n        year: 'numeric',\r\n    });\r\n};\r\n\r\nexport const toFormatTime = (date: string | Date) => {\r\n    return new Date(date).toLocaleTimeString('en-GB', {\r\n        hour: 'numeric',\r\n        minute: 'numeric',\r\n        hour12: false,\r\n    });\r\n};","export const required = (value: string) => {\r\n    return value ? undefined : 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    return value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__7Kujw\",\"error\":\"FormsControls_error__VtPjP\",\"formSummaryError\":\"FormsControls_formSummaryError__u1JdX\"};"],"names":["DialogItem","userName","userPhoto","id","lastDialogActivityDate","newMessagesCount","path","customizedDate","setTimezoneOffsetDate","date","toFormatDate","time","toFormatTime","className","styles","activeClassName","to","src","UserNoPhoto","alt","dialogsElements","state","dialogsData","map","dialog","photos","large","maxLength70","maxLengthCreator","AddMessageFormRedux","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Textarea","name","validate","required","placeholder","Message","message","senderID","userID","authUserID","authUserPhoto","isMyMessage","photo","userNoPhoto","requestMessages","sendMessage","find","lastUserActivityDate","messagesElements","messagesData","body","senderId","useEffect","values","newMessageBody","Dialogs","dialogsPage","history","useHistory","length","push","DialogsContainer","this","requestDialogs","match","params","isFetching","Preloader","React","compose","connect","auth","app","withRouter","withAuthRedirect","FormControl","input","meta","touched","error","children","hasError","restProps","Input","createField","type","validators","mapStateToPropsForRedirect","isAuth","Component","RedirectComponent","serverDate","Date","timeZoneOffset","Math","abs","getTimezoneOffset","setMinutes","getMinutes","toLocaleDateString","day","month","year","toLocaleTimeString","hour","minute","hour12","value","undefined","maxLength"],"sourceRoot":""}