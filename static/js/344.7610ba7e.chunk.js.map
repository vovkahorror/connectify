{"version":3,"file":"static/js/344.7610ba7e.chunk.js","mappings":"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","sources":["components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://connectify/./src/components/Login/Login.module.scss?4086","webpack://connectify/./src/components/Login/LoginForm/LoginForm.module.scss?ebd6","webpack://connectify/./src/components/common/FormsControls/FormsControls.module.scss?b614"],"sourcesContent":["import React, {FC} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, Input} from '../../common/FormsControls/FormsControls';\r\nimport {required} from '../../../utils/validators/validators';\r\nimport controlsStyles from '../../common/FormsControls/FormsControls.module.scss';\r\nimport styles from './LoginForm.module.scss';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {useTranslation} from 'react-i18next';\r\nimport {useTheme} from '../../../theme/useTheme';\r\n\r\nconst LoginForm: FC<InjectedFormProps<FormDataType>> = ({initialValues: {captcha}, handleSubmit, error}) => {\r\n    const {t} = useTranslation('auth');\r\n    const {theme} = useTheme();\r\n    const themeClassName = theme === 'light' ? styles.light : styles.dark;\r\n\r\n    return (\r\n        <form className={styles.form} onSubmit={handleSubmit}>\r\n            <div className={styles.fieldWrapper}>\r\n                <span className={`${styles.fieldTitle} ${themeClassName}`}>Email</span>\r\n                {createField(t('yourEmail'), 'email', 'text', [required], Input)}\r\n            </div>\r\n            <div className={styles.fieldWrapper}>\r\n                <span className={`${styles.fieldTitle} ${themeClassName}`}>{t('password')}</span>\r\n                {createField(t('enterPassword'), 'password', 'password', [required], Input)}\r\n            </div>\r\n\r\n            <label className={`${styles.rememberMe} ${themeClassName}`}>\r\n                <Field component={Input} name={'rememberMe'} type={'checkbox'}\r\n                       className={`${styles.checkbox} ${themeClassName}`}/>\r\n                <span>{t('rememberMe')}</span>\r\n            </label>\r\n\r\n            {captcha && <div className={styles.captcha}>\r\n                <img src={captcha} alt={'captcha'}/>\r\n                {createField(t('symbolsFromImage'), 'captcha', 'text', [required], Input)}\r\n            </div>}\r\n\r\n            {error && <div className={controlsStyles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n\r\n            <button>{t('logIn')}</button>\r\n\r\n            <div className={`${styles.signUpBlock} ${themeClassName}`}>\r\n                <span>{t('dontHaveAccount')}</span>\r\n                <NavLink to={'/register'}>{t('register')}</NavLink>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const LoginFormRedux = reduxForm<FormDataType>({\r\n    form: 'login',\r\n})(LoginForm);\r\n\r\nexport type FormDataType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha?: string | null;\r\n}","import React, {FC} from 'react';\r\nimport {FormDataType, LoginFormRedux} from './LoginForm/LoginForm';\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport styles from './Login.module.scss';\r\nimport Paragraph from 'antd/es/typography/Paragraph';\r\nimport {useTranslation} from 'react-i18next';\r\nimport {useTheme} from '../../theme/useTheme';\r\n\r\ntype MapStateToPropsType = {\r\n    captcha?: string | null;\r\n    isAuth: boolean;\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha?: string | null) => Promise<void>;\r\n}\r\n\r\ntype LoginPropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\nconst Login: FC<LoginPropsType> = ({login, isAuth, captcha}) => {\r\n    const {t} = useTranslation('auth');\r\n    const {theme} = useTheme();\r\n    const themeClassName = theme === 'light' ? styles.light : styles.dark;\r\n    const onSubmit = (formData: FormDataType) => {\r\n        login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n    };\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>;\r\n    }\r\n\r\n    return (\r\n        <main className={`${styles.main} ${themeClassName}`}>\r\n            <div className={`${styles.title} ${themeClassName}`}>\r\n                <h1>{t('signIn')}</h1>\r\n                <span>{t('welcomeBack')}</span>\r\n            </div>\r\n\r\n            <div className={`${styles.login} ${themeClassName}`}>\r\n                <LoginFormRedux onSubmit={onSubmit} initialValues={{captcha}}/>\r\n            </div>\r\n\r\n            <div className={`${styles.info} ${themeClassName}`}>\r\n                <span>{t('youCan')}\r\n                    <NavLink to={'/register'}> {t('createPersonalAccount')}</NavLink>,\r\n                    {t('useDemoAccount')}:</span>\r\n                <div>\r\n                    <span className={styles.copiedTextTitle}>Email:</span>\r\n                    <Paragraph className={`${styles.copiedText} ${themeClassName}`}\r\n                               copyable>free@samuraijs.com</Paragraph>\r\n                </div>\r\n                <div>\r\n                    <span className={styles.copiedTextTitle}>{t('password')}:</span>\r\n                    <Paragraph className={`${styles.copiedText} ${themeClassName}`} copyable>free</Paragraph>\r\n                </div>\r\n            </div>\r\n        </main>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        captcha: state.auth.captcha,\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import {Field, Validator, WrappedFieldProps} from 'redux-form';\r\nimport styles from './FormsControls.module.scss';\r\nimport React, {FC, ReactNode} from 'react';\r\nimport TextArea from 'antd/es/input/TextArea';\r\nimport {useTheme} from '../../../theme/useTheme';\r\n\r\ntype FormControlType = WrappedFieldProps & {\r\n    children: ReactNode;\r\n}\r\n\r\nconst FormControl: FC<FormControlType> = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea = (props: WrappedFieldProps) => {\r\n    const {input, meta, ...restProps} = props;\r\n    const {theme} = useTheme();\r\n    const themeClassName = theme === 'light' ? styles.light : styles.dark;\r\n\r\n    return (\r\n        <FormControl {...props}>\r\n            <TextArea className={`${styles.input} ${themeClassName}`}  {...input} {...restProps}/>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const Input = (props: WrappedFieldProps) => {\r\n    const {input, meta, ...restProps} = props;\r\n    const {theme} = useTheme();\r\n    const themeClassName = theme === 'light' ? styles.light : styles.dark;\r\n\r\n    return (\r\n        <FormControl {...props}>\r\n            <input className={`${styles.input} ${themeClassName}`} {...input} {...restProps}/>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const createField = (placeholder: string, name: string, type: string, validators: Validator[], component: ReactNode, autocomplete?: string, props = {}) => {\r\n    return (\r\n        <Field placeholder={placeholder} name={name} type={type} validate={validators}\r\n               component={component} autoComplete={autocomplete} {...props}/>\r\n    );\r\n};","export const required = (value: string) => {\r\n    return value ? undefined : 'Field is required';\r\n};\r\n\r\nexport const fieldsSame = (value1: string) => (value2: string) => {\r\n    return value1 === value2 ? undefined : 'Fields are not same';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    return value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Login_main__+nOO0\",\"light\":\"Login_light__uPQrD\",\"dark\":\"Login_dark__8ELld\",\"title\":\"Login_title__zXN9q\",\"login\":\"Login_login__mg93A\",\"register\":\"Login_register__tSR2G\",\"info\":\"Login_info__9twtE\",\"copiedTextTitle\":\"Login_copiedTextTitle__+T6Gw\",\"copiedText\":\"Login_copiedText__eNUfq\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__jI7Wq\",\"fieldWrapper\":\"LoginForm_fieldWrapper__xEAkr\",\"fieldTitle\":\"LoginForm_fieldTitle__VG-ri\",\"light\":\"LoginForm_light__54Cvz\",\"dark\":\"LoginForm_dark__dBXUr\",\"rememberMe\":\"LoginForm_rememberMe__jphOP\",\"acceptOffer\":\"LoginForm_acceptOffer__Z0LwE\",\"checkbox\":\"LoginForm_checkbox__bgBgj\",\"captcha\":\"LoginForm_captcha__tY7X1\",\"signUpBlock\":\"LoginForm_signUpBlock__7q-b8\",\"signInBlock\":\"LoginForm_signInBlock__JKQXI\"};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__7fIeb\",\"error\":\"FormsControls_error__KmL0f\",\"formSummaryError\":\"FormsControls_formSummaryError__4sOvX\",\"input\":\"FormsControls_input__Wooge\",\"light\":\"FormsControls_light__z4mZX\",\"dark\":\"FormsControls_dark__2R8LA\"};"],"names":["LoginFormRedux","reduxForm","form","captcha","initialValues","handleSubmit","error","t","useTranslation","themeClassName","useTheme","theme","styles","className","onSubmit","createField","required","Input","Field","component","name","type","src","alt","controlsStyles","to","connect","state","auth","isAuth","login","formData","email","password","rememberMe","Paragraph","copyable","FormControl","input","meta","touched","children","hasError","Textarea","props","restProps","placeholder","validators","autocomplete","validate","autoComplete","value","undefined"],"sourceRoot":""}